import cv2
import fnmatch as fn
import os
import time
import multiprocessing as mp

# image processing function
def img_process(input_dir, output_dir):
    pattern = '*.jpg' 
    kernel_size = (30, 45)

    for filename in os.listdir(input_dir):
        if fn.fnmatch(filename, pattern):
            input_path = os.path.join(input_dir, filename)

            img = cv2.imread(input_path)

            if img is not None:
                blur_img = cv2.blur(img, ksize=kernel_size)
                output_path = os.path.join(output_dir, filename)
                cv2.imwrite(output_path, blur_img)
                print(f"Blurred: {filename}")
            else:
                print(f"Failed to read: {filename}")
        else:
            print(f"Failed to match pattern: {filename}")

if __name__ == '__main__':

    # Record the starting time
    start_time = time.time()

    # Set up the input and output directories
    input_dirs = [
        r"N:\Languages\Pottertech image blur Development\input\1",
        r"N:\Languages\Pottertech image blur Development\input\2",
        r"N:\Languages\Pottertech image blur Development\input\3",
        r"N:\Languages\Pottertech image blur Development\input\4"
    ]
    output_dir = r"N:\Languages\Pottertech image blur Development\output"
    # Create a multiprocessing pool
    pool = mp.Pool(processes=len(input_dirs))

    # Process each input directory concurrently
    for input_dir in input_dirs:
        pool.apply_async(img_process, args=(input_dir, output_dir))

    # Close the pool and wait for all processes to finish
    pool.close()
    pool.join()

    # Record the ending time
    end_time = time.time()

    # Calculate the elapsed time
    elapsed_time = end_time - start_time

    # Print the elapsed time
    print("Elapsed time:", elapsed_time, "seconds")
